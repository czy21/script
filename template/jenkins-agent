def helm, k8s
fileLoader.withGit('git@gitee.com:czyhome/script.git', 'master', 'bruce', '') {
    helm = fileLoader.load('groovy/helm.groovy');
    k8s = fileLoader.load('groovy/k8s.groovy');
}

def ENV_FILE_ID='dev.env'
def ENV_NAME='dev'
def RELEASE_NAMESPACE = 'erp'
def RELEASE_NAME = 'gateway'
def RELEASE_VERSION = 'dev-bruce'

pipeline{
  agent {
    kubernetes {
        cloud ENV_NAME
        yaml '''
          apiVersion: v1
          kind: Pod
          spec:
            volumes:
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
            - name: docker-cmd
              hostPath:
                path: /usr/bin/docker
            - name: kubectl
              hostPath:
                path: /bin/kubectl
            containers:
            - name: jnlp
              image: 'registry.cluster2.com/library/jenkins-agent'
              securityContext:
                runAsUser: 0
              volumeMounts:
              - name: docker-sock
                mountPath: /var/run/docker.sock
              - name: docker-cmd
                mountPath: /usr/bin/docker
              - name: kubectl
                mountPath: /bin/kubectl
    '''
    }
  }
  stages{
    stage('deploy') {
      steps {
        script {
            configFileProvider([configFile(fileId: ENV_FILE_ID, targetLocation: 'env.groovy', variable: 'ENV_CONFIG')]) {
                load "env.groovy";
            }
            env.ENV_NAME = ENV_NAME
            env.RELEASE_NAMESPACE = RELEASE_NAMESPACE
            env.RELEASE_NAME = RELEASE_NAME
            env.RELEASE_VERSION = RELEASE_VERSION
            env.RELEASE_CHART_NAME    = env.HELM_JAVA_CHART_NAME
            env.RELEASE_CHART_VERSION = env.HELM_JAVA_CHART_VERSION
            helm.build()
            k8s.apply()
        }
      }
    }
  }
}