---
apiVersion: v1
kind: Service
metadata:
  name: '{{ .Release.Name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    app: {{ .Release.Name }}
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      volumes:
      - name: nginx-conf
        configMap:
          name: '{{ .Release.Name }}'
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: conf
        configMap:
          name: '{{ .Release.Name }}'
          items:
          - key: app-http.conf
            path: app-http.conf
      - name: log
        persistentVolumeClaim:
          claimName: data-{{ .Release.Name }}
      containers:
      - name: '{{ .Release.Name }}'
        image: {{ .Values.registry_repo }}/{{ .Values.registry_dir }}/{{ .Release.Name }}:{{ .Values.release_version }}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: conf
          mountPath: /etc/nginx/conf.d/
        - name: log
          mountPath: /var/log/nginx/
          subPath: log
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}
  namespace: '{{ .Release.Namespace }}'
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 256Gi
  storageClassName: managed-nfs-storage
