apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    app: {{ .Release.Name }}
  type: ClusterIP
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: '{{ .Release.Namespace }}'
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
       app: {{ .Release.Name }}
  template:
    metadata:
     labels:
       app: {{ .Release.Name }}
    spec:
      volumes:
        - name: conf
          configMap:
            name: {{ .Release.Name }}
            items:
              - key: "application.yml"
                path: "application.yml"
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.registry.url }}/{{ .Values.registry.dir }}/{{ .Release.Namespace }}-{{ .Release.Name }}:{{ .Values.imageTag }}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: ENV_NAME
              value: dev
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: conf
              mountPath: /home/app/config/
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: 'data-{{ .Release.Name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 256Gi
  storageClassName: "managed-nfs-storage"
