apiVersion: v1
kind: Service
metadata:
  name: portal
  namespace: stable
spec:
  selector:
    app: portal
  type: ClusterIP
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal
  namespace: stable
  labels:
    app: portal
data:
  application.yml: |
    server:
      port: 8080
    spring:
      application:
        name: portal
      config:
        import: consul:consul.internal-home.com:80
      cloud:
        consul:
          host: consul.internal-home.com
          port: 80
          discovery:
            instance-id: ${POD_NAME}
            serviceName: dev/${spring.application.name}
            prefer-ip-address: true
            health-check-critical-timeout: 10s
          config:
            format: yaml
            prefixes: dev
            default-context: ${spring.application.name}
            enabled: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal
  namespace: stable
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: portal
  template:
    metadata:
      labels:
        app: portal
    spec:
      volumes:
        - name: conf
          configMap:
            name: portal
            items:
              - key: "application.yml"
                path: "application.yml"
      containers:
        - name: portal
          image: registry:5000/portal-dev:dev-bruce
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: conf
              mountPath: /home/app/config/
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-portal
  namespace: stable
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 256Gi
  storageClassName: "managed-nfs-storage"
